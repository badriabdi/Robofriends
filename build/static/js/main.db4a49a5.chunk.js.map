{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","Searchfield","target","value","state","fetch","then","response","json","users","this","filteredrobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,OAAOC,IAAG,mCAA8BH,EAA9B,cACnB,6BACA,4BAAKF,GACL,2BAAIC,MCsBSK,EAxBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGlB,OACC,6BAEDA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACA,kBAAC,EAAD,CAAOC,IAAKD,EACZR,GAAKK,EAAOG,GAAGR,GACfF,KAAQO,EAAOG,GAAGV,KAClBC,MAAOM,EAAOG,GAAGT,aCFJW,EAdG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC/B,OACC,yBAAKX,UAAU,OACf,2BACAA,UAAU,oCACVY,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCECI,G,MATA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,YCoDMC,E,YAlDd,aAAc,IAAD,8BACZ,+CAgBDC,eAAiB,SAACC,GACjB,EAAKC,SAAU,CAACC,YAAYF,EAAMG,OAAOC,SAhBzC,EAAKC,MAAQ,CACZzB,OAAO,GACPsB,YAAa,IAJF,E,iFAQO,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKT,SAAS,CAACrB,OAAQ8B,S,+BAShB,IAAD,EACsBC,KAAKN,MAA3BzB,EADA,EACAA,OAAOsB,EADP,EACOA,YACRU,EAAiBhC,EAAOiC,QAAO,SAAAC,GACrC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASd,EAAYa,kBAIrD,OAAKnC,EAAOqC,OAKZ,yBAAKzC,UAAU,MACf,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACA,kBAAE,EAAF,CAAWnB,OAAQgC,MARX,2C,GA/BQM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAQ,kBAAE,EAAF,MAASC,SAASC,eAAe,SDuH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.db4a49a5.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt='robo' src={`https://www.robohash.org/${id}?200x200`}/>\n\t\t<div>\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\n\t\t</div>\n\t\t</div>\n\t\t)\n}\n\n\nexport default Card;","\nimport React from 'react';\nimport Card from './Card'\n\n\n\n\nconst CardList = ({robots}) =>{\n\n\t\n\treturn (\n\t\t<div>\n\t\t{\n\trobots.map((user,i) =>{\n\t\treturn (\n\t\t<Card  key={i} \n\t\tid ={robots[i].id} \n\t\tname = {robots[i].name} \n\t\temail={robots[i].email}\n\t\t/>\n\t);\n\n\t})\n}\n\n\t\n\t</div>\n\t\t);\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) =>{\n\treturn (\n\t\t<div className='pa2'>\n\t\t<input \n\t\tclassName='pa3 ba b--green bg-lighttest-blue'\n\t\ttype='search' \n\t\tplaceholder='search robots'\n\t\tonChange = {searchChange}\n\t\t/>\n\t\t</div>\n\t\t)\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflow: 'scroll', border:'2px solid black', height:'800px'}}>\n\t\t{props.children}\n\t\t</div>\n\n\t\t)\n}\n\nexport default Scroll;","import React,{Component} from 'react';\nimport CardList from '../component/CardList';\nimport SearchBox from '../component/SearchBox';\nimport './App.css';\nimport Scroll from '../component/Scroll'\n\nclass App extends Component  {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots:[],\n\t\t\tSearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>{\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users =>{\n\t\t\tthis.setState({robots: users})\n\t\t});\n\t\t\n\t}\n\tonSearchChange = (event)=>{\n\t\tthis.setState ({Searchfield:event.target.value})\n\n\t}\n\n\trender(){\n\t\tconst {robots,Searchfield} = this.state;\n\t\tconst filteredrobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(Searchfield.toLowerCase())\n\n\t\t})\n\n\t if (!robots.length){\n\t \treturn <h1>loading</h1>\n\t }else{\n\n\t \treturn (\n\t\t<div className='tc'>\n\t\t<h1 className='f1'>Robotfriends</h1>\n\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t<Scroll>\n\t\t< CardList robots={filteredrobots}/>\n\t\t</Scroll>\n\t\t</div>\n\t\t)\n\t}\n}\n\n\t }\n\n\t\n\n\nexport default App;\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render( < App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}